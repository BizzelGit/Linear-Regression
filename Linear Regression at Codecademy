# Load libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
import codecademylib3

# Read in the data
codecademy = pd.read_csv('codecademy.csv')

# Print the first five rows
print(codecademy.head())
# Create a scatter plot of score vs completed
# Scatter Plot erstellen
plt.scatter(codecademy.score, codecademy.completed)
plt.xlabel("score")
plt.ylabel("completed")
plt.title("codeacademy")
plt.grid(True)

# Show then clear plot
plt.show()
plt.clf()
# Fit a linear regression to predict score based on prior lessons completed
model = sm.OLS.from_formula('score ~ completed', data = codecademy)
results = model.fit()
print(results.params)
# Intercept interpretation:
# Slope interpretation:
#13 ist der Score wenn jemand 0 Task abgeschlossen hat, für jeden Task erhöht sicht der Score um 1.3

# Plot the scatter plot with the line on top
x_plot = np.linspace(codecademy.completed.min(), codecademy.completed.max(), 100)
y_plot = results.predict(pd.DataFrame({'completed': x_plot}))
plt.scatter(codecademy.completed, codecademy.score)
plt.plot(x_plot, y_plot, linewidth=2)
plt.xlabel("completed")
plt.ylabel("score")
plt.title("codeacademy")
plt.grid(True)

# Show then clear plot
plt.show()
plt.clf()

# Predict score for learner who has completed 20 prior lessons
pred_20ls = 1.306826 * 20 + 13.214113
print(pred_20ls) 

# Calculate fitted values
codecademy['fitted'] = results.fittedvalues

# Calculate residuals
codecademy['residuals'] = results.resid

print(codecademy[['completed', 'score', 'fitted', 'residuals']].head())

# Check normality assumption
plt.hist(codecademy['residuals'], bins=20, edgecolor='black')
plt.xlabel("Residual")
plt.ylabel("Frequency")
plt.title("Histogram der Residuen")

# Show then clear the plot
plt.show()
plt.clf()

sm.qqplot(codecademy['residuals'], line='45', fit=True)
plt.title("QQ-Plot der Residuen (Normalität)")
plt.show()
plt.clf()

# Check homoscedasticity assumption

plt.scatter(codecademy['fitted'], codecademy['residuals'])
plt.axhline(0, linestyle='--')
plt.xlabel("Fitted values")
plt.ylabel("Residuals")
plt.title("Residuen vs Fitted (Homoskedastizität)")

# Show then clear the plot
plt.show()
plt.clf()

# Create a boxplot of score vs lesson
sns.boxplot(x = 'lesson', y = 'score', data = codecademy)
# Show then clear plot
plt.show()
plt.clf()

# Fit a linear regression to predict score based on which lesson they took
# Tipp: Stelle sicher, dass 'browser' in der CSV vorhanden ist.
model = sm.OLS.from_formula('score ~ lesson', data = codecademy)
results = model.fit()
print("Koeffizienten (codecademy):")
print(results.params)
print(results.summary())

# Calculate and print the group means and mean difference (for comparison)
group_means = codecademy.groupby('lesson')['score'].mean().sort_values(ascending=False)
print("Gruppenmittelwerte (Stunden nach Punkten):")
print(group_means)


# Use `sns.lmplot()` to plot `score` vs. `completed` colored by `lesson`
sns.lmplot(x = 'completed', y = 'score', hue = 'lesson', data = codecademy)
plt.show()
